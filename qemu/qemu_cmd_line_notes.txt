1) Qemu startup:
   ------------
1) bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -initrd ../../build/initramfs-busybox-x86.cpio.gz -kernel ../../mainline_kernel/arch/x86_64/boot/bzImage -nographic -append "console=ttyS0" -enable-kvm -L pc-bios

2) bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -kernel ../mainline_linux/linux/arch/x86_64/boot/bzImage -initrd ../busybox/build/initramfs_busybox.cpio.gz -nographic -append "console=ttyS0 ip=dhcp" -L pc-bios -enable-kvm -m 1G -smp 2 -device e1000,netdev=user.0 -netdev user,id=user.0

3) bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -kernel ../mainline_linux/linux/arch/x86_64/boot/bzImage -hda ../ubuntu_img/ubuntu_rfs.img  -nographic -append "console=ttyS0 ip=dhcp root=/dev/sda" -L pc-bios -enable-kvm -m 1G -smp 2 -device e1000,netdev=user.0 -netdev user,id=user.0

4) sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -kernel ../mainline_linux/linux/arch/x86_64/boot/bzImage -hda ../rootfs_img/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 ip=dhcp root=/dev/sda" -L pc-bios -enable-kvm -m 1G -smp 2 -device e1000,netdev=net0 -netdev tap,id=net0,ifname=tap0

5) QEMU /dev/net/tun Operation not permitted. Run with script=no,downscript=no
sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -kernel ../mainline_linux/linux/arch/x86_64/boot/bzImage -hda ../rootfs_img/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda" -L pc-bios -enable-kvm -m 1G -smp 2 -device e1000,netdev=net0 -netdev tap,id=net0,script=no,downscript=no,ifname=tap0

6) QEMU /dev/net/tun Operation not permitted. It can also be fixed with -runas
sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -kernel ../mainline_linux/linux/arch/x86_64/boot/bzImage -hda ../rootfs_img/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda" -L pc-bios -enable-kvm -m 1G -smp 2 -device e1000,netdev=net0 -netdev tap,id=net0,ifname=tap0 -runas `whoami`

7) QEMU with Vhost:
sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -kernel ../mainline_kernel/arch/x86_64/boot/bzImage -hda ../rfs_images/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda" -L pc-bios -enable-kvm -m 1G -smp 2 -device virtio-net-pci,netdev=net0 -netdev tap,id=net0,vhost=on,script=no,downscript=no,ifname=tap0 -runas `whoami`

8) QEMU with Vhost and IRQ remapping and IOMMU:
sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -M q35,kernel-irqchip=split -device intel-iommu,intremap=on -kernel ../mainline_kernel/arch/x86_64/boot/bzImage -hda ../rfs_images/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda" -L pc-bios -enable-kvm -m 1G -smp 2 -device virtio-net-pci,netdev=net0 -netdev tap,id=net0,vhost=on,ifname=tap0,script=no,downscript=no -runas `whoami`

9) Selection of tmp105 I2C
sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -M q35,kernel-irqchip=split -device intel-iommu,intremap=on -kernel ../mainline_kernel/arch/x86_64/boot/bzImage -hda ../rfs_images/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda nokaslr" -L pc-bios -enable-kvm -m 1G -smp 2 -netdev type=tap,id=net0,ifname=tap0,vhost=on,script=no,downscript=no -runas `whoami` -device virtio-net-pci,netdev=net0 -device tmp105,id=sensor,address=0x49

10) Better command line options for Selection of tmp105 I2C

sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -M q35,kernel-irqchip=split -device intel-iommu,intremap=on,caching-mode=on -kernel ../mainline_kernel/arch/x86_64/boot/bzImage -hda ../rfs_images/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda nokaslr" -L pc-bios -enable-kvm -m 1G -smp 2 -device virtio-net-pci,netdev=net0 -netdev tap,id=net0,vhost=on,ifname=tap0,script=no,downscript=no -runas `whoami` -device tmp123,id=sensor,address=0x49 -device tmp421,id=sensor1,address=0x1c -trace events=/tmp/events -D /tmp/qemu.log -d unimp

11) To start with QMP OOB:

sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -M q35,kernel-irqchip=split -device intel-iommu,intremap=on,caching-mode=on -kernel ../mainline_kernel/arch/x86_64/boot/bzImage -hda ../rfs_images/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda nokaslr" -L pc-bios -enable-kvm -m 1G -smp 2 -device virtio-net-pci,netdev=net0 -netdev tap,id=net0,vhost=on,ifname=tap0,script=no,downscript=no -runas `whoami` -device tmp123,id=sensor,address=0x49 -device tmp421,id=sensor1,address=0x1c -trace events=/tmp/events -D /tmp/qemu.log -d unimp -qmp tcp:localhost:4444,server,nowait

/* Value set to 50000 because the number is divided by 1000 before setting the value */
{"execute": "qom-set", "arguments": {"path": "sensor", "property":"temperature", "value":50000}}
{"execute": "qom-get", "arguments": {"path": "sensor", "property":"temperature"}}



In the command line do:

sudo i2cdetect -y 0 0x21

** In Qemu bring up the ethernet interface. Check for tap0 to come up 
   in the dmesg logs in the host
** It takes time for tap interface to come up. After this do a dhclient -i enp0s*

2) Busybox build:
   -------------
	a) Separate build directory:
      -------------------------
		1) Change to busybox directory -> cd <dir>/busybox
      	2) Create build directory -> mkdir -pv ../build/busybox-1.31.0
	  	3) Use a defconfig -> make O=../build/busybox-1.31.0 defconfig
		4) To select options do a make menuconfig and select static linking
			-> make O=../build/busybox-1.31.0 menuconfig
    b) Build busybox in the build directory:
       ------------------------------------
		1) cd ../build/busybox-1.31.0
		2) make -j10
		3) make install
    c) Create a initramfs:
	   ------------------
		1) mkdir -pv ../build/initramfs
		2) cd ../build/initramfs
		3) mkdir -pv {bin,sbin,etc,proc,sys,tmp,usr/{bin,sbin}}
        4) cp -av ../busybox-1.31.0/_install/* .
		5) Create a init as follows:
			
			-------------------------------------------
			#!/bin/sh
			
			mount -t proc none /proc
			mount -t sysfs none /sys
			mount -t debugfs none /sys/kernel/debug
			#mount -t configfs none /sys/kernel/config
			mount -t tmpfs none /tmp
			mount -t tmpfs -o size=64k,mode=0755 tmpfs /dev
			mkdir /dev/pts
			mount -t devpts devpts /dev/pts
			
			echo -e "\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\n"
			
			exec /bin/sh
			
			mdev -s	
			-------------------------------------------
		6) Set the init to executable:
			chmod +x init
		7) Generate the initramfs file:
			find . -print0 \
			| cpio --null -ov --format=newc \
			| gzip -9 > ../initramfs-busybox-x86.cpio.gz

3) Basic Kernel build:
   ==================
	a) Clone mainline linux kernel
	b) Change to the cloned directory
	c) Use the base x86_64 defconfig for a base .config
		-> make x86_64_defconfig
	d) Use kvmconfig for optimized config for virtualized systems (Appended to the base .config)
       	-> make kvmconfig
    e) Build!!
       	-> make -j10
    
    Misc:
	----
	a) Enable CONFIG_UEVENT_HELPER for mdev


4) Qemu Ubuntu image creation:
   ==========================
	a) qemu-img create ubuntu-image.img 5g
	b) mkfs.ext4 ubuntu-image.img
	c) sudo mount -o loop ubuntu-image.img img_mnt
	d) sudo debootstrap --arch amd64 disco img_mnt
	e) sudo umount img_mnt


5) Qemu Network backend configuration:
   ==================================
	a) SLiRP:
       -----
		Nothing to be setup. Ping does not work. To test simply scp a file from
		guest to host. (Setup certificates if necessary).

	b) TUN/TAP:
	   -------
	   1) Setup bridge br0.
	   2) Add the host NIC to the bridge. (Bring down the host NIC before this)
	   3) Create a tun0 interface. Add this interface to the bridge.
	   4) Setup the bridge to get address via DHCP

	   It can be done via UI because the Network Manager keeps iterfering

	   Via command line:
	   a) sudo ip link set enp7s0 down
	   b) sudo ip tuntap add dev tap0 mode tap user `whoami`
	   c) sudo brctl addbr bridge0
	   d) sudo brctl addif enp7s0
	   e) sudo brctl addif tap0
	   f) Create dhcp configuration to give IP to the bridge in netplan
	   g) Remove any previous dhcp configuration for enp7s0
	   h) brctl shows the following:
			xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
			bridge name     bridge id               STP enabled     interfaces
			bridge0         8000.52c373a8e1c2       yes             enp7s0
																	tap0
			xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	   i) Network Manager is known to interfere with brctl. Following can be done
			to setup using NetworkManager via nmcli:
			1) nmcli conn add ifname br0 type bridge con-name br0
			2) nmcli conn modify br0 bridge.stp no
			3) nmcli con edit br0
			4) In the command line do -> set ipv4.dns 8.8.8.8,8.8.4.4 (Save and exit)
			5) nmcli conn add type bridge-slave ifname eth0 master br0
			6) Restart the NetworkManager -> sudo systemctl restart NetworkManager
			7) Add the tun/tap interface as above
			8) ****Add the tap0 interface as in (5)****
			9) Adding tap0 interface to the bridge is useless using nmcli. Use the following to
			   add the tap interface to the bridge:
			   -> sudo ip link set tap0 master bridge0

6) Ubuntu RFS creation:
   ===================
	a) Do a debootrap to get Ubuntu RFS
	b) During boot in Qemu the "sda" device will be mounted as read only. Modify
	   fstab to make it read-write

7) Networking experiments:
   ======================
	a) TUN/TAP testing by setting the link to 172.0.0.1 i.e. non local ip address.
	b) Bring up the tun0 interface once the tun0 interface is setup by the code.
	c) Assign IP address to it.

8) Debugging kernel with Qemu and GDB:
   ==================================
	a) Disable KASLR (Kernel Address Space Layout Randomization). Can be done by passing
       "nokaslr" in the kernel options or by disabling CONFIG_RANDOMIZE_BASE in the
	   kernel menuconfig.

       ********************************** Note *****************************************
	   If the above is not disabled Qemu will not hit any breakpoints set by remote GDB.
	   *********************************************************************************
	b) Use hbreak (hardware breakpoint) to set atleast the first breakpoint.

9) Building Qemu:
   =============

	# Switch to the QEMU root directory.
	cd qemu
	# Prepare a native debug build.
	mkdir -p bin/debug/native
	cd bin/debug/native
	# Configure QEMU and start the build.
	../../../configure --enable-debug --enable-trace-backends=simple
	make
	# Return to the QEMU root directory.
	cd ../../..
	# For submodules especially for ROMS:
	git submodule update --remote


	For OpenGL and SDL support:
	--------------------------
	../../../configure --enable-debug --enable-trace-backends=simple --enable-sdl \
	 --enable-opengl --enable-virglrenderer --enable-kvm

		With doc support:
		----------------
		../../../configure --enable-debug --enable-trace-backends=simple --enable-docs \
			--enable-virglrenderer --enable-opengl --enable-sdl --enable-curses

