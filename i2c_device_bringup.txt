This document explains bringing up enabling TMP105 and TMP421 I2C device support
in Qemu.

Steps:
=====

1) Enable TMP105(Bus addr 0x49) and TMP421(/*Bus addr 0x19*/ Bus addr 0x1c) in Qemu by writing
   -> Select TMP105 and TMP421 in Kconfig present in qemu/hw/i386 in the config Q35 CPU
		section
2) Enable User space I2C support, HWMON, LM25 for TMP105 and TMP421 drivers in the kernel
3) Install sensors package in the RFS or build for Ubuntu etc
4) To instantiate a device do the following:
	sudo bash -c "echo tmp421 0x1c > new_device" where new_device file is present in
	/sys/bus/i2c/devices/i2c-0
5) To delete the device do the following:
	sudo bash -c "echo 0x1c > delete_device" where delete_device is present in
	/sys/bus/i2c/devices/i2c-0
6) To startup with the following devices attached to I2C bus give the following command: 
	sudo bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -M q35,kernel-irqchip=split -device intel-iommu,intremap=on -kernel ../mainline_kernel/arch/x86_64/boot/bzImage -hda ../rfs_images/ubuntu_rfs/disco.img  -nographic -append "console=ttyS0 root=/dev/sda nokaslr" -L pc-bios -enable-kvm -m 1G -smp 2 -device virtio-net-pci,netdev=net0 -netdev tap,id=net0,vhost=on,ifname=tap0,script=no,downscript=no -runas `whoami` -device tmp105,id=sensor,address=0x49 -device tmp421,id=sensor1,address=0x1c
7) Run command --> sensors to verify the list of SMBUS sensors. Following is the sample output:
		
		tmp105-i2c-0-49
		Adapter: SMBus I801 adapter at 0700
		temp1:         +0.0°C  (high =  +0.0°C, hyst =  +0.0°C)
		
		tmp421-i2c-0-1c
		Adapter: SMBus I801 adapter at 0700
		temp1:         +0.0°C  
		temp2:         +0.0°C
8) Before enabling and trying out things make sure you have the following options enabled
   in the kernel:

	a) CONFIG_I2C_I801
	b) CONFIG_I2C_ISCH
	c) CONFIG_I2C_ISMT
	d) CONFIG_SENSORS_TMP421 (TMP421)
	e) CONFIG_SENSORS_LM25 (TMP105)

9) Enable Tracing:
   ==============
	a) Add event in a events file with each even per line. In case of i2c the events are
		present in hw/i2c/trace-events
      For eg you can add a trace event i2c_event in the events file
    b) During startup add a --trace = <dir>/events file
    c) You can also add events in the Qemu monitor. Do a -> trace-event i2c_* on to enable
       wildcard i2c events
    d) In another command line to view the trace events do a
       $ bin/debug/native/scripts/simpletrace.py bin/debug/native/trace-events-all \
			 trace-<qemu_pid> | grep i2c
	e) Do some simple I2C transactions like i2cdetect or instantiate a device like above
	   and run sensors command to generate i2c events
    f) You will not be able to see i2c events in the file if you do not flush the
       trace-events file. To do this do -> $ trace-file flush
	   which will flush the events to the file. (Wasted a lot of time as the trace file
	   was empty)

	Trace build setup:
    =================
	a) To enable trace in the build use the following:
		$ ./../../configure --enable-debug --enable-trace-backends=simple


I2C Passthrough Discussion:
==========================
stefanha> nascentmind: I'm also not sure you can get really low-level I2C access because the register interfaces on physical I2C controllers are not necessarily that low-level.  They may be at the transaction level.
<stefanha> nascentmind: So only some physical I2C controllers could be used in such a low-level mode.
stefanha> nascentmind: I think the most effective way to do I2C passthrough with QEMU today is to take either the patch you linked or the one I linked,
<stefanha> and then check if your target machine type has an I2C controller,
<stefanha> and then you may need to write a few lines of code to put the I2C passthrough device onto that emulated I2C controller.
<stefanha> At that point the guest should have basic I2C to a physical I2C device on the host.
<stefanha> If your machine type doesn't have an I2C controller and no existing I2C controller in QEMU can be plugged in, then either implementing a physical I2C controller native to that machine type or going the VIRTIO route would make sense.

Patch 1: [PATCH v3] chardev/char-i2c: Implement Linux I2C character device


<f4bug> nascentmind: I posted SD card tests in python 2 years ago, I believe the way they work would ease your i2c device development/testing
<f4bug> nascentmind: basically I exposed the SD bus over QMP so I could directly test the SD bus and the SD device without having a hardware implementation interfering with my goal
<f4bug> nascentmind: see https://lists.gnu.org/archive/html/qemu-devel/2017-12/msg02349.html (QMP) and https://lists.gnu.org/archive/html/qemu-devel/2017-12/msg02350.html (Python tests)


Qapi implementation
-------------------

<stefanha> nascentmind: Not that I'm aware of.  The point of using Visitor is so that a single string-output-visitor.c can encapsulate all the code for formatting ints/lists/etc as a string and qobject-output-visitor.c encapsulates creating QObjects.  Then you can pass either of them to get different types of output without modifying tmp105.
<stefanha> nascentmind: So tmp105 doesn't know if it's reading/writing the temperature value from/to a QObject, a string, etc.  The Visitor is a layer of indirection.
<stefanha> nascentmind: And the QAPI visitor autogenerates code for all the QMP API types (qapi/qapi-schema.json)

QTest
-----

<stefanha> nascentmind: The 'qom-get' and 'qom-set' commands used by tests/tmp105-test.c are QMP commands that will work on a running QEMU.  The tmp105-test.c itself doesn't support connecting to a running QEMU process though.
<stefanha> nascentmind: There are several possibilities: 1. run the QMP commands manually, 2. write a Python test script (similar to tmp105-test.c) using the qmp module in python/qemu/qmp.py, 3. hack tmp105-test.c to connect to a running QEMU instance.

<stefanha> nascentmind: tmp105-test is a qtest program.  qtest is a special mode where QEMU accepts test operations (load/store memory, check for interrupts, etc) from a test program over a socket.
<stefanha> nascentmind: tmp105-test runs as a process on the host.  It launches QEMU and talks to it over qtest and QMP.
<stefanha> nascentmind: There is a video explaining qtest here: https://www.youtube.com/watch?v=4TSaMmrnHy8
